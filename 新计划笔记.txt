2018-3-1
--------------------------------

正则表达式：
1. [A-Za-z]\w+ 第一个字符是字母，后面是至少一个(+)由字母数字组成的字符(\w)
2. 择一匹配符号：管道符(  |  )
3. 匹配任意单个字符(除换行符\n外的任何字符)：.  (使用编译标记 S 或者 DOTALL 可以使点号也匹配换行符)
4. 起始: ^ 或 \A  末尾； $ 或 \Z    （^ 脱字符）
5. \b 匹配单词边界 （\btree   以tree开头  tree\b  以tree结尾） \B 匹配单词中间 (\Btree 包含tree, 但不是以tree开头)
6. 字符集：[]  匹配方括号中的任何 一个 字符           [^] 表示不匹配方括号中的任何一个字符
     ["-a]  匹配ASCII码为 34-97 的任意一个字符
7. 闭包操作符:  星号操作符 * : 匹配其左边的正则表达式出现0次或多次 (Kleene闭包)
                                               + :  ----------------------------------1-----多--- (正闭包操作符)
											   ?  :  ----------------------------------0-----1----
				           大括号操作符 {}:  {N} 匹配N次   {M, N} 匹配M~N次
							? 紧跟在任何闭合操作符后面, 将直接要求正则表达式引擎尽可能少的匹配（非贪婪模式）
8. 表示字符集的特殊字符
     * d  表示匹配任何十进制数字的字符集   [0-9]
	 * \w 表示所有字母数字下划线的字符集 相当于[A-Za-z0-9_]
	 * \s 表示空格字符 
     * 所有这些特殊字符的大写版本表示不匹配  如：\D  相当于 [^0-9]	 
9. 使用圆括号()指定分组,  可以实现以下任意一个功能：
	* 对正则表达式进行分组
	* 匹配子组

10. 例子
		* \d+(\.\d*)?     整数或一位小数   例如“0.004”、“2”、“75.”等
		* (Mr?s?\.)?[A-Z][a-z]*[A-Za-z-]+     
		* 解释：名字和姓氏，以及对名字的限制（如果有，首字母必须大写，后续字母小写），全名前可以
有可选的“Mr.”、“Mrs.”、“Ms.”或者“M.”作为称谓，以及灵活可选的姓氏，可以有多
个单词、横线以及大写字母

11. 扩展表示法：(?...)  通常用于在判断匹配之前提供标记  (?P<name>) 表述一个分组匹配
		*  (?:...) 表示不用保存的分组
		
--------------------------------------------------------------------	

12. re 模块

13. search() 和 match() 区别:
      match() 是 从字符串的起始位置开始匹配模式
	  search()  会搜索模式在字符串中第一次出现的位置，而且严格地对字符串从左到右搜索
	  
	  ```python
	  m = re.match('foo', 'seafood')
	  if m is not None: m.group() # 不匹配  m 为None
	  
	  m = re.search('foo',  'seafood')
	  if m is not None: m.group() # 匹配 值为foo
	  

